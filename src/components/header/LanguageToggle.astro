---
import { siteConfig } from "../../config/site";
---

<button id="language-toggle" class="language-toggle" aria-label="Toggle language">
  {siteConfig.supportedLanguages.map((lang, idx) => (
    <>
      <div class="lang-option" data-lang={lang.code}>
        <span class="lang-text">{lang.label}</span>
      </div>
      {idx < siteConfig.supportedLanguages.length - 1 && (
        <span class="lang-separator">/</span>
      )}
    </>
  ))}
</button>

<style>
  .language-toggle {
    background: none;
    border: none;
    color: var(--text-color);
    cursor: pointer;
    padding: 0.3rem;
    font-size: 0.9rem;
    font-weight: 500;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    transition: all 0.3s ease;
    position: relative;
    border-radius: 8px;
  }

  .language-toggle:hover {
    background: var(--bg-hover);
    box-shadow: 0 0 0 1px var(--border-color);
  }

  .lang-option {
    display: flex;
    align-items: center;
    padding: 0.4rem 0.6rem;
    border-radius: 4px;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .lang-option:hover {
    background: var(--bg-hover-light);
  }

  .lang-option::before {
    content: '';
    position: absolute;
    top: -5px;
    left: 0;
    right: 0;
    height: 16px;
    background-position: center;
    background-size: contain;
    background-repeat: no-repeat;
    opacity: 0.7;
    transition: all 0.3s ease;
  }

  .lang-option[data-lang="pt-BR"]::before {
    background-image: url('/flags/br.svg');
  }

  .lang-option[data-lang="en"]::before {
    background-image: url('/flags/us.svg');
  }

  .lang-text {
    opacity: 0.9;
    transition: all 0.3s ease;
    position: relative;
    z-index: 2;
    color: var(--text-color);
    font-weight: 500;
  }

  .lang-text.current {
    opacity: 1;
    font-weight: 600; /* Reverted weight */
    /* Color and text-decoration reverted to default */
  }

  .lang-option:has(.current) {
    background: var(--bg-hover);
  }

  .lang-option:has(.current)::before {
    opacity: 0.9;
  }

  .lang-option:hover::before {
    opacity: 1;
  }

  .lang-separator {
    opacity: 0.5;
    margin: 0 0.25rem;
    user-select: none;
  }

  :root {
    --bg-hover: rgba(128, 128, 128, 0.1);
    --bg-hover-light: rgba(128, 128, 128, 0.05);
    --border-color: rgba(128, 128, 128, 0.2);
  }

  .dark {
    --bg-hover: rgba(255, 255, 255, 0.1);
    --bg-hover-light: rgba(255, 255, 255, 0.05);
    --border-color: rgba(255, 255, 255, 0.2);
  }
</style>

<script>
  const languageToggle = document.getElementById('language-toggle');
  const ptBrOption = languageToggle?.querySelector('[data-lang="pt-BR"]');
  const engOption = languageToggle?.querySelector('[data-lang="en"]');
  const langOptions = Array.from(languageToggle?.querySelectorAll('.lang-option') || []);
  const langTexts = langOptions.map(opt => opt.querySelector('.lang-text'));

  let currentTranslations = {};

  // Fetches translations for the given language
  async function loadTranslations(lang: string): Promise<Record<string, string>> {
    try {
      const response = await fetch(`/locales/${lang}.json`);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const translations = await response.json() as Record<string, string>;
      currentTranslations = translations;
      translatePage();
      return translations;
    } catch (error) {
      console.error('Error loading translation file:', error);
      currentTranslations = {};
      return {};
    }
  }

  // Updates text content of elements with data-translate-key
  function translatePage() {
    document.querySelectorAll('[data-translate-key]').forEach(element => {
      const key = element.getAttribute('data-translate-key');
      if (key && (currentTranslations as Record<string, string>)[key]) {
        element.textContent = (currentTranslations as Record<string, string>)[key];
      }
    });
  }

  // Updates the UI of the toggle button itself
  function updateToggleUI(lang: string) {
    langOptions.forEach((opt, idx) => {
      const code = opt.getAttribute('data-lang');
      if (langTexts[idx]) {
        if (code === lang) {
          langTexts[idx].classList.add('current');
        } else {
          langTexts[idx].classList.remove('current');
        }
      }
    });
  }

  // Sets the language, saves it, updates UI, and loads translations
  function setLanguage(lang: string) {
    localStorage.setItem('language', lang);
    document.documentElement.setAttribute('lang', lang);
    updateToggleUI(lang);
    loadTranslations(lang); // Load and apply translations
  }

  // Add click listeners
  langOptions.forEach(opt => {
    const code = opt.getAttribute('data-lang');
    if (code) {
      opt.addEventListener('click', () => setLanguage(code));
    }
  });

  // Initialize on page load
  function initializeLanguage() {
    const savedLang = localStorage.getItem('language') || 'pt-BR';
    document.documentElement.setAttribute('lang', savedLang);
    updateToggleUI(savedLang);
    loadTranslations(savedLang); // Load initial translations
  }

  // Run initialization when the DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeLanguage);
  } else {
    initializeLanguage();
  }
</script>