---
interface Props {
  title?: string;
}

const { title = "Juliano BC" } = Astro.props;
---

<header class="header">
  <div class="header-content">
    <div class="logo">
      <a href="/" class="animated-border">
        <span class="name">{title}</span>
        <span class="title-caption">FullStack Web Dev</span>
      </a>
    </div>
    <nav class="nav-menu">
      <ul>
        <li><a href="/">Home</a></li>
        <li><a href="/about">About</a></li>
        <li><a href="/projects">Projects</a></li>
        <li><a href="/contact">Contact</a></li>
        <li>
          <button id="theme-toggle" class="theme-toggle" aria-label="Toggle dark mode">
            <svg class="sun-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <circle cx="12" cy="12" r="5"></circle>
              <line x1="12" y1="1" x2="12" y2="3"></line>
              <line x1="12" y1="21" x2="12" y2="23"></line>
              <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
              <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
              <line x1="1" y1="12" x2="3" y2="12"></line>
              <line x1="21" y1="12" x2="23" y2="12"></line>
              <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
              <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
            </svg>
            <svg class="moon-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
            </svg>
          </button>
        </li>
      </ul>
    </nav>
  </div>
</header>

<style>
  .header {
    background-color: var(--bg-header);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: 1000;
  }

  .header-content {
    max-width: 1200px;
    margin: 0 auto;
    padding: 1rem 2rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .logo a {
    text-decoration: none;
    transition: all 0.3s ease;
    display: flex;
    flex-direction: column;
    line-height: 1.2;
    padding: 0.5rem 1rem;
    position: relative;
  }

  .animated-border {
    position: relative;
  }

  .animated-border::before {
    content: '';
    position: absolute;
    top: -2px;
    left: -2px;
    right: -2px;
    bottom: -2px;
    border-radius: 8px;
    background: linear-gradient(
      45deg,
      #ff0000,
      #ff7300,
      #fffb00,
      #48ff00,
      #00ffd5,
      #002bff,
      #7a00ff,
      #ff00c8,
      #ff0000
    );
    background-size: 400%;
    z-index: -1;
    animation: rgb-border 20s linear infinite;
  }

  .animated-border::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: var(--bg-header);
    border-radius: 6px;
    z-index: -1;
  }

  @keyframes rgb-border {
    0% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
    100% {
      background-position: 0% 50%;
    }
  }

  .name {
    font-size: 2rem;
    font-weight: bold;
    color: var(--text-primary);
    letter-spacing: 0.5px;
    text-shadow: 0 0 10px rgba(255, 255, 255, 0.1);
  }

  .title-caption {
    font-size: 0.9rem;
    color: var(--text-secondary);
    font-weight: normal;
  }

  .logo a:hover {
    transform: translateY(-2px);
  }

  .nav-menu ul {
    list-style: none;
    display: flex;
    gap: 2rem;
    margin: 0;
    padding: 0;
    align-items: center;
  }

  .nav-menu a {
    color: var(--text-primary);
    text-decoration: none;
    font-size: 1rem;
    transition: color 0.3s ease;
    padding: 0.5rem 0;
    position: relative;
  }

  .nav-menu a::after {
    content: '';
    position: absolute;
    width: 0;
    height: 2px;
    bottom: 0;
    left: 0;
    background-color: var(--text-secondary);
    transition: width 0.3s ease;
  }

  .nav-menu a:hover::after {
    width: 100%;
  }

  .nav-menu a:hover {
    color: var(--text-hover);
  }

  .theme-toggle {
    background: none;
    border: none;
    padding: 0.5rem;
    cursor: pointer;
    color: var(--text-primary);
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    transition: background-color 0.3s ease;
  }

  .theme-toggle:hover {
    background-color: var(--bg-hover);
  }

  .sun-icon,
  .moon-icon {
    width: 20px;
    height: 20px;
  }

  :global(.dark) .sun-icon {
    display: none;
  }

  :global(.light) .moon-icon {
    display: none;
  }

  @media (max-width: 768px) {
    .header-content {
      flex-direction: column;
      gap: 1rem;
      padding: 1rem;
    }

    .nav-menu ul {
      gap: 1rem;
    }

    .logo a {
      text-align: center;
      align-items: center;
    }

    .name {
      font-size: 1.75rem;
    }
  }
</style>

<script>
  // Check for saved theme preference, otherwise use system preference
  const theme = (() => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme');
    }
    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
      return 'dark';
    }
    return 'light';
  })();

  if (theme === 'light') {
    document.documentElement.classList.remove('dark');
    document.documentElement.classList.add('light');
  } else {
    document.documentElement.classList.remove('light');
    document.documentElement.classList.add('dark');
  }

  window.localStorage.setItem('theme', theme);

  const handleToggleClick = () => {
    const element = document.documentElement;
    element.classList.toggle("dark");
    element.classList.toggle("light");

    const isDark = element.classList.contains("dark");
    localStorage.setItem("theme", isDark ? "dark" : "light");
  }

  document.getElementById("theme-toggle")?.addEventListener("click", handleToggleClick);
</script>
